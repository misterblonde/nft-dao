/* Autogenerated file. Do not edit manually. */

/* tslint:disable */

/* eslint-disable */
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";

export interface ConvictionVotingInterface extends utils.Interface {
  functions: {
    "ABSTAIN_PROPOSAL_ID()": FunctionFragment;
    "D()": FunctionFragment;
    "MAX_STAKED_PROPOSALS()": FunctionFragment;
    "ONE_HUNDRED_PERCENT()": FunctionFragment;
    "addProposal(string,bytes,uint256,bool,address)": FunctionFragment;
    "calculateConviction(uint64,uint256,uint256)": FunctionFragment;
    "calculateThreshold(uint256)": FunctionFragment;
    "cancelProposal(uint256)": FunctionFragment;
    "contractPaused()": FunctionFragment;
    "decay()": FunctionFragment;
    "executeProposal(uint256)": FunctionFragment;
    "fundsManager()": FunctionFragment;
    "initialize(address,address,address,address,uint256,uint256,uint256,uint256)": FunctionFragment;
    "maxRatio()": FunctionFragment;
    "minThresholdStakePercentage()": FunctionFragment;
    "proposalCounter()": FunctionFragment;
    "requestToken()": FunctionFragment;
    "setConvictionCalculationSettings(uint256,uint256,uint256,uint256)": FunctionFragment;
    "stableToken()": FunctionFragment;
    "stakeAllToProposal(uint256)": FunctionFragment;
    "stakeToProposal(uint256,uint256)": FunctionFragment;
    "stakeToken()": FunctionFragment;
    "totalStaked()": FunctionFragment;
    "weight()": FunctionFragment;
    "withdrawAllFromProposal(uint256)": FunctionFragment;
    "withdrawFromInactiveProposals()": FunctionFragment;
    "withdrawFromProposal(uint256,uint256)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ABSTAIN_PROPOSAL_ID"
      | "D"
      | "MAX_STAKED_PROPOSALS"
      | "ONE_HUNDRED_PERCENT"
      | "addProposal"
      | "calculateConviction"
      | "calculateThreshold"
      | "cancelProposal"
      | "contractPaused"
      | "decay"
      | "executeProposal"
      | "fundsManager"
      | "initialize"
      | "maxRatio"
      | "minThresholdStakePercentage"
      | "proposalCounter"
      | "requestToken"
      | "setConvictionCalculationSettings"
      | "stableToken"
      | "stakeAllToProposal"
      | "stakeToProposal"
      | "stakeToken"
      | "totalStaked"
      | "weight"
      | "withdrawAllFromProposal"
      | "withdrawFromInactiveProposals"
      | "withdrawFromProposal"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "ABSTAIN_PROPOSAL_ID",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "D", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "MAX_STAKED_PROPOSALS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "ONE_HUNDRED_PERCENT",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addProposal",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateConviction",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateThreshold",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "cancelProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "contractPaused",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decay", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "executeProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "fundsManager",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(functionFragment: "maxRatio", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "minThresholdStakePercentage",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "proposalCounter",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setConvictionCalculationSettings",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "stableToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "stakeAllToProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToProposal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "stakeToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "totalStaked",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "weight", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "withdrawAllFromProposal",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromInactiveProposals",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFromProposal",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;

  decodeFunctionResult(
    functionFragment: "ABSTAIN_PROPOSAL_ID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "D", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "MAX_STAKED_PROPOSALS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "ONE_HUNDRED_PERCENT",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateConviction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateThreshold",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "cancelProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contractPaused",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundsManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "maxRatio", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "minThresholdStakePercentage",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "proposalCounter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setConvictionCalculationSettings",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stableToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeAllToProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "stakeToProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "stakeToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalStaked",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "weight", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawAllFromProposal",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromInactiveProposals",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFromProposal",
    data: BytesLike
  ): Result;

  events: {
    "ConvictionSettingsChanged(uint256,uint256,uint256,uint256)": EventFragment;
    "ProposalAdded(address,uint256,string,bytes,uint256,bool,address)": EventFragment;
    "ProposalCancelled(uint256)": EventFragment;
    "ProposalExecuted(uint256,uint256)": EventFragment;
    "ProposalPaused(uint256,uint256)": EventFragment;
    "ProposalRejected(uint256)": EventFragment;
    "ProposalResumed(uint256)": EventFragment;
    "StakeAdded(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
    "StakeWithdrawn(address,uint256,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "ConvictionSettingsChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalCancelled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalExecuted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalPaused"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalRejected"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ProposalResumed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeAdded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StakeWithdrawn"): EventFragment;
}

export interface ConvictionSettingsChangedEventObject {
  decay: BigNumber;
  maxRatio: BigNumber;
  weight: BigNumber;
  minThresholdStakePercentage: BigNumber;
}
export type ConvictionSettingsChangedEvent = TypedEvent<
  [BigNumber, BigNumber, BigNumber, BigNumber],
  ConvictionSettingsChangedEventObject
>;

export type ConvictionSettingsChangedEventFilter =
  TypedEventFilter<ConvictionSettingsChangedEvent>;

export interface ProposalAddedEventObject {
  entity: string;
  id: BigNumber;
  title: string;
  link: string;
  amount: BigNumber;
  stable: boolean;
  beneficiary: string;
}
export type ProposalAddedEvent = TypedEvent<
  [string, BigNumber, string, string, BigNumber, boolean, string],
  ProposalAddedEventObject
>;

export type ProposalAddedEventFilter = TypedEventFilter<ProposalAddedEvent>;

export interface ProposalCancelledEventObject {
  proposalId: BigNumber;
}
export type ProposalCancelledEvent = TypedEvent<
  [BigNumber],
  ProposalCancelledEventObject
>;

export type ProposalCancelledEventFilter =
  TypedEventFilter<ProposalCancelledEvent>;

export interface ProposalExecutedEventObject {
  id: BigNumber;
  conviction: BigNumber;
}
export type ProposalExecutedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalExecutedEventObject
>;

export type ProposalExecutedEventFilter =
  TypedEventFilter<ProposalExecutedEvent>;

export interface ProposalPausedEventObject {
  proposalId: BigNumber;
  challengeId: BigNumber;
}
export type ProposalPausedEvent = TypedEvent<
  [BigNumber, BigNumber],
  ProposalPausedEventObject
>;

export type ProposalPausedEventFilter = TypedEventFilter<ProposalPausedEvent>;

export interface ProposalRejectedEventObject {
  proposalId: BigNumber;
}
export type ProposalRejectedEvent = TypedEvent<
  [BigNumber],
  ProposalRejectedEventObject
>;

export type ProposalRejectedEventFilter =
  TypedEventFilter<ProposalRejectedEvent>;

export interface ProposalResumedEventObject {
  proposalId: BigNumber;
}
export type ProposalResumedEvent = TypedEvent<
  [BigNumber],
  ProposalResumedEventObject
>;

export type ProposalResumedEventFilter = TypedEventFilter<ProposalResumedEvent>;

export interface StakeAddedEventObject {
  entity: string;
  id: BigNumber;
  amount: BigNumber;
  tokensStaked: BigNumber;
  totalTokensStaked: BigNumber;
  conviction: BigNumber;
}
export type StakeAddedEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  StakeAddedEventObject
>;

export type StakeAddedEventFilter = TypedEventFilter<StakeAddedEvent>;

export interface StakeWithdrawnEventObject {
  entity: string;
  id: BigNumber;
  amount: BigNumber;
  tokensStaked: BigNumber;
  totalTokensStaked: BigNumber;
  conviction: BigNumber;
}
export type StakeWithdrawnEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber],
  StakeWithdrawnEventObject
>;

export type StakeWithdrawnEventFilter = TypedEventFilter<StakeWithdrawnEvent>;

export interface ConvictionVoting extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ConvictionVotingInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ABSTAIN_PROPOSAL_ID(overrides?: CallOverrides): Promise<[BigNumber]>;

    D(overrides?: CallOverrides): Promise<[BigNumber]>;

    MAX_STAKED_PROPOSALS(overrides?: CallOverrides): Promise<[BigNumber]>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<[BigNumber]>;

    addProposal(
      _title: PromiseOrValue<string>,
      _link: PromiseOrValue<BytesLike>,
      _requestedAmount: PromiseOrValue<BigNumberish>,
      _stableRequestAmount: PromiseOrValue<boolean>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    calculateConviction(
      _timePassed: PromiseOrValue<BigNumberish>,
      _lastConv: PromiseOrValue<BigNumberish>,
      _oldAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    calculateThreshold(
      _requestedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { _threshold: BigNumber }>;

    cancelProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    contractPaused(overrides?: CallOverrides): Promise<[boolean]>;

    decay(overrides?: CallOverrides): Promise<[BigNumber]>;

    executeProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fundsManager(overrides?: CallOverrides): Promise<[string]>;

    initialize(
      _stakeToken: PromiseOrValue<string>,
      _requestToken: PromiseOrValue<string>,
      _stableToken: PromiseOrValue<string>,
      _fundsManager: PromiseOrValue<string>,
      _decay: PromiseOrValue<BigNumberish>,
      _maxRatio: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    maxRatio(overrides?: CallOverrides): Promise<[BigNumber]>;

    minThresholdStakePercentage(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    proposalCounter(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestToken(overrides?: CallOverrides): Promise<[string]>;

    setConvictionCalculationSettings(
      _decay: PromiseOrValue<BigNumberish>,
      _maxRatio: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stableToken(overrides?: CallOverrides): Promise<[string]>;

    stakeAllToProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeToProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<[string]>;

    totalStaked(overrides?: CallOverrides): Promise<[BigNumber]>;

    weight(overrides?: CallOverrides): Promise<[BigNumber]>;

    withdrawAllFromProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromInactiveProposals(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    withdrawFromProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  ABSTAIN_PROPOSAL_ID(overrides?: CallOverrides): Promise<BigNumber>;

  D(overrides?: CallOverrides): Promise<BigNumber>;

  MAX_STAKED_PROPOSALS(overrides?: CallOverrides): Promise<BigNumber>;

  ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

  addProposal(
    _title: PromiseOrValue<string>,
    _link: PromiseOrValue<BytesLike>,
    _requestedAmount: PromiseOrValue<BigNumberish>,
    _stableRequestAmount: PromiseOrValue<boolean>,
    _beneficiary: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  calculateConviction(
    _timePassed: PromiseOrValue<BigNumberish>,
    _lastConv: PromiseOrValue<BigNumberish>,
    _oldAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  calculateThreshold(
    _requestedAmount: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  cancelProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  contractPaused(overrides?: CallOverrides): Promise<boolean>;

  decay(overrides?: CallOverrides): Promise<BigNumber>;

  executeProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fundsManager(overrides?: CallOverrides): Promise<string>;

  initialize(
    _stakeToken: PromiseOrValue<string>,
    _requestToken: PromiseOrValue<string>,
    _stableToken: PromiseOrValue<string>,
    _fundsManager: PromiseOrValue<string>,
    _decay: PromiseOrValue<BigNumberish>,
    _maxRatio: PromiseOrValue<BigNumberish>,
    _weight: PromiseOrValue<BigNumberish>,
    _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  maxRatio(overrides?: CallOverrides): Promise<BigNumber>;

  minThresholdStakePercentage(overrides?: CallOverrides): Promise<BigNumber>;

  proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

  requestToken(overrides?: CallOverrides): Promise<string>;

  setConvictionCalculationSettings(
    _decay: PromiseOrValue<BigNumberish>,
    _maxRatio: PromiseOrValue<BigNumberish>,
    _weight: PromiseOrValue<BigNumberish>,
    _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stableToken(overrides?: CallOverrides): Promise<string>;

  stakeAllToProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeToProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  stakeToken(overrides?: CallOverrides): Promise<string>;

  totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

  weight(overrides?: CallOverrides): Promise<BigNumber>;

  withdrawAllFromProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromInactiveProposals(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  withdrawFromProposal(
    _proposalId: PromiseOrValue<BigNumberish>,
    _amount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    ABSTAIN_PROPOSAL_ID(overrides?: CallOverrides): Promise<BigNumber>;

    D(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STAKED_PROPOSALS(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addProposal(
      _title: PromiseOrValue<string>,
      _link: PromiseOrValue<BytesLike>,
      _requestedAmount: PromiseOrValue<BigNumberish>,
      _stableRequestAmount: PromiseOrValue<boolean>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateConviction(
      _timePassed: PromiseOrValue<BigNumberish>,
      _lastConv: PromiseOrValue<BigNumberish>,
      _oldAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateThreshold(
      _requestedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    contractPaused(overrides?: CallOverrides): Promise<boolean>;

    decay(overrides?: CallOverrides): Promise<BigNumber>;

    executeProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    fundsManager(overrides?: CallOverrides): Promise<string>;

    initialize(
      _stakeToken: PromiseOrValue<string>,
      _requestToken: PromiseOrValue<string>,
      _stableToken: PromiseOrValue<string>,
      _fundsManager: PromiseOrValue<string>,
      _decay: PromiseOrValue<BigNumberish>,
      _maxRatio: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    maxRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minThresholdStakePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

    requestToken(overrides?: CallOverrides): Promise<string>;

    setConvictionCalculationSettings(
      _decay: PromiseOrValue<BigNumberish>,
      _maxRatio: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stableToken(overrides?: CallOverrides): Promise<string>;

    stakeAllToProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeToProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    stakeToken(overrides?: CallOverrides): Promise<string>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    weight(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllFromProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFromInactiveProposals(overrides?: CallOverrides): Promise<void>;

    withdrawFromProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "ConvictionSettingsChanged(uint256,uint256,uint256,uint256)"(
      decay?: null,
      maxRatio?: null,
      weight?: null,
      minThresholdStakePercentage?: null
    ): ConvictionSettingsChangedEventFilter;
    ConvictionSettingsChanged(
      decay?: null,
      maxRatio?: null,
      weight?: null,
      minThresholdStakePercentage?: null
    ): ConvictionSettingsChangedEventFilter;

    "ProposalAdded(address,uint256,string,bytes,uint256,bool,address)"(
      entity?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      title?: null,
      link?: null,
      amount?: null,
      stable?: null,
      beneficiary?: null
    ): ProposalAddedEventFilter;
    ProposalAdded(
      entity?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      title?: null,
      link?: null,
      amount?: null,
      stable?: null,
      beneficiary?: null
    ): ProposalAddedEventFilter;

    "ProposalCancelled(uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalCancelledEventFilter;
    ProposalCancelled(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalCancelledEventFilter;

    "ProposalExecuted(uint256,uint256)"(
      id?: PromiseOrValue<BigNumberish> | null,
      conviction?: null
    ): ProposalExecutedEventFilter;
    ProposalExecuted(
      id?: PromiseOrValue<BigNumberish> | null,
      conviction?: null
    ): ProposalExecutedEventFilter;

    "ProposalPaused(uint256,uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      challengeId?: PromiseOrValue<BigNumberish> | null
    ): ProposalPausedEventFilter;
    ProposalPaused(
      proposalId?: PromiseOrValue<BigNumberish> | null,
      challengeId?: PromiseOrValue<BigNumberish> | null
    ): ProposalPausedEventFilter;

    "ProposalRejected(uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalRejectedEventFilter;
    ProposalRejected(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalRejectedEventFilter;

    "ProposalResumed(uint256)"(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalResumedEventFilter;
    ProposalResumed(
      proposalId?: PromiseOrValue<BigNumberish> | null
    ): ProposalResumedEventFilter;

    "StakeAdded(address,uint256,uint256,uint256,uint256,uint256)"(
      entity?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      tokensStaked?: null,
      totalTokensStaked?: null,
      conviction?: null
    ): StakeAddedEventFilter;
    StakeAdded(
      entity?: PromiseOrValue<string> | null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      tokensStaked?: null,
      totalTokensStaked?: null,
      conviction?: null
    ): StakeAddedEventFilter;

    "StakeWithdrawn(address,uint256,uint256,uint256,uint256,uint256)"(
      entity?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      tokensStaked?: null,
      totalTokensStaked?: null,
      conviction?: null
    ): StakeWithdrawnEventFilter;
    StakeWithdrawn(
      entity?: null,
      id?: PromiseOrValue<BigNumberish> | null,
      amount?: null,
      tokensStaked?: null,
      totalTokensStaked?: null,
      conviction?: null
    ): StakeWithdrawnEventFilter;
  };

  estimateGas: {
    ABSTAIN_PROPOSAL_ID(overrides?: CallOverrides): Promise<BigNumber>;

    D(overrides?: CallOverrides): Promise<BigNumber>;

    MAX_STAKED_PROPOSALS(overrides?: CallOverrides): Promise<BigNumber>;

    ONE_HUNDRED_PERCENT(overrides?: CallOverrides): Promise<BigNumber>;

    addProposal(
      _title: PromiseOrValue<string>,
      _link: PromiseOrValue<BytesLike>,
      _requestedAmount: PromiseOrValue<BigNumberish>,
      _stableRequestAmount: PromiseOrValue<boolean>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    calculateConviction(
      _timePassed: PromiseOrValue<BigNumberish>,
      _lastConv: PromiseOrValue<BigNumberish>,
      _oldAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    calculateThreshold(
      _requestedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    cancelProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    contractPaused(overrides?: CallOverrides): Promise<BigNumber>;

    decay(overrides?: CallOverrides): Promise<BigNumber>;

    executeProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fundsManager(overrides?: CallOverrides): Promise<BigNumber>;

    initialize(
      _stakeToken: PromiseOrValue<string>,
      _requestToken: PromiseOrValue<string>,
      _stableToken: PromiseOrValue<string>,
      _fundsManager: PromiseOrValue<string>,
      _decay: PromiseOrValue<BigNumberish>,
      _maxRatio: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    maxRatio(overrides?: CallOverrides): Promise<BigNumber>;

    minThresholdStakePercentage(overrides?: CallOverrides): Promise<BigNumber>;

    proposalCounter(overrides?: CallOverrides): Promise<BigNumber>;

    requestToken(overrides?: CallOverrides): Promise<BigNumber>;

    setConvictionCalculationSettings(
      _decay: PromiseOrValue<BigNumberish>,
      _maxRatio: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stableToken(overrides?: CallOverrides): Promise<BigNumber>;

    stakeAllToProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeToProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    stakeToken(overrides?: CallOverrides): Promise<BigNumber>;

    totalStaked(overrides?: CallOverrides): Promise<BigNumber>;

    weight(overrides?: CallOverrides): Promise<BigNumber>;

    withdrawAllFromProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromInactiveProposals(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    withdrawFromProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ABSTAIN_PROPOSAL_ID(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    D(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    MAX_STAKED_PROPOSALS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    ONE_HUNDRED_PERCENT(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    addProposal(
      _title: PromiseOrValue<string>,
      _link: PromiseOrValue<BytesLike>,
      _requestedAmount: PromiseOrValue<BigNumberish>,
      _stableRequestAmount: PromiseOrValue<boolean>,
      _beneficiary: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    calculateConviction(
      _timePassed: PromiseOrValue<BigNumberish>,
      _lastConv: PromiseOrValue<BigNumberish>,
      _oldAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    calculateThreshold(
      _requestedAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    cancelProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    contractPaused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    decay(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    executeProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fundsManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    initialize(
      _stakeToken: PromiseOrValue<string>,
      _requestToken: PromiseOrValue<string>,
      _stableToken: PromiseOrValue<string>,
      _fundsManager: PromiseOrValue<string>,
      _decay: PromiseOrValue<BigNumberish>,
      _maxRatio: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    maxRatio(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minThresholdStakePercentage(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    proposalCounter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    requestToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setConvictionCalculationSettings(
      _decay: PromiseOrValue<BigNumberish>,
      _maxRatio: PromiseOrValue<BigNumberish>,
      _weight: PromiseOrValue<BigNumberish>,
      _minThresholdStakePercentage: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stableToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    stakeAllToProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeToProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    stakeToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalStaked(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    weight(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    withdrawAllFromProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromInactiveProposals(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFromProposal(
      _proposalId: PromiseOrValue<BigNumberish>,
      _amount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
